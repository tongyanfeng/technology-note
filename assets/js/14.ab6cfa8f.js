(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{655:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("JavaScript的数据类型分为两类：")]),t._v(" "),a("ul",[a("li",[t._v("原始类型（primitive）和对象类型（object），除了这个纬度的分类，也有其他其他维度的分类，")])]),t._v(" "),a("blockquote",[a("p",[t._v("如：拥有方法的类型和不能拥有方法的类型、可变类型和不可变类型。\n原始类型包括数字，字符串，布尔值，null，undefined\n对象类型包括对象，数组，函数（特殊的对象）")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("拥有方法类型和不能拥有方法类型：从技术上讲，只有Javascript对象才能拥有方法，然而，数字、字符串和布尔值也可以拥有自己的方法，在Jacascript中，只有 null 和 undefined 是无法拥有方法的。")])]),t._v(" "),a("li",[a("p",[t._v("可变类型和不可变类型：可变类型的值是可以修改的，对象和数组是属于可变类型，数字、布尔值、null 和 undefined 是不可变类型。")])])]),t._v(" "),a("h3",{attrs:{id:"_3-1-数字直接量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数字直接量"}},[t._v("#")]),t._v(" 3.1 数字直接量")]),t._v(" "),a("p",[t._v("分为两种：整型直接量和浮点型直接量。\n整型直接量：在 Javascript 中，可以识别十进制和十六进制（0x/0X），但在 Javascript 的某些实现上，可以允许八进制的形式，但是，在严格模式下，是不允许的，所以还是最好不要使用八进制的形式。\n浮点型：[digits][.difits][(E|e)[(+|-)]digits]")]),t._v(" "),a("h3",{attrs:{id:"_3-1-3-算数运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-算数运算"}},[t._v("#")]),t._v(" 3.1.3 算数运算")]),t._v(" "),a("p",[t._v("算数运算的要点，在于算数运算时的溢出（overflow）、下溢（underflow）、负零值和正零值相等。")]),t._v(" "),a("p",[t._v("溢出（overflow）说明：")]),t._v(" "),a("blockquote",[a("p",[t._v("当运算结果超过了 Javascript 所能表示的数字上限，结果为一个特殊的无穷大（Infinity）值，同样，当负数的值超过了 Javascript 所能表示的负数范围时，结果就为负无穷大（-Infinity）。")])]),t._v(" "),a("p",[t._v("下溢（underflow）说明：")]),t._v(" "),a("blockquote",[a("p",[t._v("当运算结果，无限接近于 0，并比 Javascript 所能表示的最小值还小的时候，Javascript 就会返回 0.")])]),t._v(" "),a("p",[t._v("那么接下来，我们举几个例子，来更好的理解上述两个概念。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.7976931348623157e+308")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5e-324")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 溢出")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -- 溢出的特殊情况")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有数除以0，都得 Infinity。除了 0/0 -> NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下溢")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -0")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-1-4-浮点数运算问题以及精度丢失问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-浮点数运算问题以及精度丢失问题"}},[t._v("#")]),t._v(" 3.1.4 浮点数运算问题以及精度丢失问题")]),t._v(" "),a("p",[t._v("**问题遗留，这个问题得从底层原理去探讨")]),t._v(" "),a("h3",{attrs:{id:"_3-2-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-字符串"}},[t._v("#")]),t._v(" 3.2 字符串")]),t._v(" "),a("p",[t._v("Javascript 采用 UTF-16 编码的 Unicode 字符集，字符串是一组由 16 位组成的不可变的有序序列，每个字符通常来自于 Unicode 字符集。字符串的长度是其所含 16 位值的个数。Javascript 定义的各式字符串操作方法均作用于 16 位值，而非字符。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-1-字符串直接量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-字符串直接量"}},[t._v("#")]),t._v(" 3.2.1 字符串直接量")]),t._v(" "),a("blockquote",[a("p",[t._v("定义：由单引号或双引号扩起来的字符序列。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.14"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name=\"donggua general\"'")]),t._v("\n")])])]),a("p",[t._v("ps：\n在 ES3 中，字符串直接量必须写在一行，而在 ES5 中，字符串直接量可以拆分成数行，被拆分的每行必须以反斜线（\\）结束，反斜线和行结束符都不算事字符串直接量的内容，如果希望在字符串直接量中另起一行，可以用 \\n")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two\\nlines"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one\\\nlong\\\nline"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里是三行，那么是哪三行呢？")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-2-3-字符串方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-字符串方法"}},[t._v("#")]),t._v(" 3.2.3 字符串方法")]),t._v(" "),a("blockquote",[a("p",[t._v("字符串方法，是不改变原有字符串的，原有字符串固定不变，都是会返回新的字符串。")])]),t._v(" "),a("h3",{attrs:{id:"_3-3-布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-布尔值"}},[t._v("#")]),t._v(" 3.3 布尔值")]),t._v(" "),a("blockquote",[a("p",[t._v("布尔值只有两个值，true/false\n任意 Javascript 的值都可以转成布尔值，以下这些会转成 false：")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这些可以转换成 false 的值，称为 “假值”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空字符串")]),t._v("\n")])])]),a("p",[t._v("除了上述的值之外，所有其他值，包括所有对象（数组）都会转换成true，这些可以转位 true 的，有时亦被称之为“真值”。")]),t._v(" "),a("h3",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[t._v("#")]),t._v(" null 和 undefined")]),t._v(" "),a("blockquote",[a("p",[t._v("null 是关键字，表示一个特殊值，常用来描述“空值”，对 null 进行 typeof 的时候，返回值也是字符串 “object”。")])]),t._v(" "),a("blockquote",[a("p",[t._v("undefined 是预定义的全局变量，并不是一个关键字，他的值就是“未定义”，使用 typeof 运算符得到 undefined 的类型，返回的是 “undefined”。")])]),t._v(" "),a("p",[t._v("两者是不同的，但是他们都表示“值的空缺”，两者可以互换，在 == 的条件下，认为是相等的。但全等下，是不相等的")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("最佳使用场景：")]),t._v(" "),a("p",[t._v("undefined 是表示系统级，出乎意料的或类似错误的值的空缺，而 null 是表示程序级的，正常的或在医疗之中的值的空缺。\n如果想将他们赋值给变量或者属性，或将它们作为参数输入函数，最佳选择是使用 null。")]),t._v(" "),a("h3",{attrs:{id:"_3-5-全局对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-全局对象"}},[t._v("#")]),t._v(" 3.5 全局对象")]),t._v(" "),a("blockquote",[a("p",[t._v("全局对象的属性，是全局定义的符号，Javascript 程序可以直接使用。")])]),t._v(" "),a("blockquote",[a("p",[t._v("在 Javascript 解释器启动的时候，会创建一个新的全局对象，并定义一组初始属性。\n全局属性（undefined、Infinty、NaN ...）\n全局函数（isNaN()\\parseInt()\\eval()）\n构造函数（Date()\\RegExp()\\String()\\Object()\\Array()）\n全局对象（Math\\JSON）")])]),t._v(" "),a("p",[t._v("在客户端 Javascript 中，Window 对象充当了全局对象，其中有一个属性 window 引用其自身。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器控制台中打印")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" window   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("当初次创建的时候，全局对象定义了 Javascript 中所有的预定义全局值，这个特殊对象同样包含了位陈旭定义的全局值。如果代码声明了一个全局变量，这个全局变量就是全局对象的一个属性。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-6-包装对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-包装对象"}},[t._v("#")]),t._v(" 3.6 包装对象")]),t._v(" "),a("p",[t._v("对于字符串、数字、布尔值来讲，本身是没有方法的，在他们调用方法的时候，其实是通过 new String(), new Number(),new Boolean() 的方式，去创建了一个新的对象，通过对象来继承对应的构造函数的方法，从而引用到对应的属性、方法，当这个属性的引用结束后，这个临时创建的对象，就会被销毁。（在真正实现上的时候，并不一定是创建、销毁这个临时对象，然而整个过程看起来是这样子的。）\n举例说明")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t 等于 undefined")]),t._v("\n")])])]),a("p",[t._v("第二行代码创建了临时字符串对象，并且给其 len 属性赋值了一个 4，但后随即被销毁。")]),t._v(" "),a("p",[t._v("第三行代码，通过原始的字符串 s 又创建了一个新的临时字符串对象，此时这个字符串对象的 len 属性，自然不存在值。")]),t._v(" "),a("p",[t._v("这里面还有一点需要说明，在读取字符串、数字、布尔值的属性值或方法时，其表现跟对象一致，但在试图给其属性赋值的时候，则不会讲这个过程给保留下来，赋值只会出现在这个临时对象，而临时对象则会被销毁。这个对象叫做 “包装对象”。")]),t._v(" "),a("h3",{attrs:{id:"_3-7-不可变的原始值和可变的对象引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-不可变的原始值和可变的对象引用"}},[t._v("#")]),t._v(" 3.7 不可变的原始值和可变的对象引用")]),t._v(" "),a("p",[t._v("Javascript 的原始值例如数字、字符串、布尔值、null、undefined，与对象有着根本的区别，原始值不可更改，任何方法都不能去更改原始值，字符串的更改，如之前的要点所提，是返回了一个新的字符串，而不是修改原有值。对象是可修改的。")]),t._v(" "),a("p",[t._v("原始值的比较，只有他们的值相等时，才认为他们是相等的。")]),t._v(" "),a("p",[t._v("对象，我们通常认为他是引用类型（reference type），和 Javascript 的基本类型区分开。对象的值，都是引用，在底层的原理，在栈内存储的是对象的地址，而非对象本身，所以，在比较不同对象的时候，就算他们的值相等，这两个对象也是不想等的，因为这两者的引不同，只有两个对象的引用地址相等时，这两个对象才相等。")]),t._v(" "),a("h3",{attrs:{id:"_3-8-1-转换和相等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-1-转换和相等性"}},[t._v("#")]),t._v(" 3.8.1 转换和相等性")]),t._v(" "),a("p",[t._v("“==” 在做比较的时候，会做一些类型转换，而 “===” 则不会。")]),t._v(" "),a("p",[t._v("类型转换，在做一些期望布尔值的地方，使用了 undefined 时，会转换成 false，但是并不能表示 undefined == false.")]),t._v(" "),a("p",[t._v("*** 这里要理清楚，什么时候会做类型转换，什么时候不会。")]),t._v(" "),a("h3",{attrs:{id:"_3-8-2-显示类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-2-显示类型转换"}},[t._v("#")]),t._v(" 3.8.2 显示类型转换")]),t._v(" "),a("p",[t._v("在 Javascript 中，Boolean、Number、String 这些构造函数使用的时候，不带有 new 关键字，那么它们会作为类型转换函数去执行。")]),t._v(" "),a("h3",{attrs:{id:"_3-8-3-对象转换为原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-3-对象转换为原始值"}},[t._v("#")]),t._v(" 3.8.3 对象转换为原始值")]),t._v(" "),a("p",[a("strong",[t._v("一：如何转化为原始值")]),a("br"),t._v(" "),a("strong",[t._v("1. 对象 -> 布尔值")])]),t._v(" "),a("blockquote",[a("p",[t._v("所有对象都转换为 true，对于包装对象也是如此：new Boolean(false) 是一个对象，而不是原始值，他将转化为 true。")])]),t._v(" "),a("p",[a("strong",[t._v("2. 对象 -> 字符串 / 对象 -> 数字")])]),t._v(" "),a("blockquote",[a("p",[t._v("是通过调用 带转换对象 的方法来完成的，一个是 toString()，一个是 valueOf()。")])]),t._v(" "),a("p",[t._v("对象转换字符串的过程：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("第一步，如果对象具有 toString() 方法，则调用这个方法，如果返回了一个原始值，如果这个原始值不是字符串，自会将它转换成字符串。并返回这个字符串结果。")]),t._v(" "),a("li",[t._v("第二步，如果没有 toString() 方法，或者上述返回的不是原始值，那么 Javascript 就会去执行 valueOf() 方法，如果存在则调用，如果返回的是原始值，则转换为字符串。")]),t._v(" "),a("li",[t._v("第三步，如果第二步，返回的不是原始值，这时候 Javascript 就会抛出一个类型错误异常。")])])]),t._v(" "),a("p",[t._v("对象转换数字的过程：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("第一步，如果对象有 valueOf() 方法，执行的时候如果返回了原始值，则会转成数字，并返回。")]),t._v(" "),a("li",[t._v("第二步，如果第一步返回的不是原始值，那么就回去看这个对象有没有 toString() 方法，有则执行，返回的如果是一个原始值，则会被转为数字，并返回。")]),t._v(" "),a("li",[t._v("第三部，第二步返回的不是原始值，则会抛出一个类型错误异常。")])])]),t._v(" "),a("ul",[a("li",[t._v("toString()")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应以下各个类自定义的 toString() 方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1,2,3"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function(x) {\\n f(x); \\n}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RegExp 类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /\\\\d+/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 日期类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Fri Jan 01 2010 00:00:00 GMT-0800 (PST)"')]),t._v("\n")])])]),a("ul",[a("li",[t._v("valueOf()\n没有详情的定义：如果存在任意原始值，他就默认将对象转换为表示它的原始值。对象是复合值，而大多数对象无法真正表示为一个原始值，因此默认 valueOf() 方法简单的返回对象本身，而不是返回一个原始值。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具有对应原始值的转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '123'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复杂对象的转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {x: 1}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {x: 1, y: [1,2,3]}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数、数组、正则表达式都是简单的继承了这个默认方法，返回对象本身。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 日期类定义的 valueOf() 会返回它内部定义的表示：时间戳 1970年1月1日 以来的毫秒数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1612108800000")]),t._v("\n")])])]),a("p",[t._v("对象转字符串")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 转换目标执行 toString()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n\n")])])]),a("p",[t._v("对象转数字")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照转换步骤")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 转换目标执行 valueOf() 返回的不是原始值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 执行 toString() ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 如果是原始值则转换成数字，通过 Number，转换对象执行，可以得出 '' 转成数字 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 12")]),t._v("\n")])])]),a("p",[a("strong",[t._v("3. 运算符下对象如何转换")]),a("br"),t._v("\n运算符 "),a("code",[t._v("+")]),t._v(" 、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("!=")]),t._v("和关系运算符（>、<、<=、>=），会执行特殊的"),a("code",[t._v("对象到原始值")]),t._v("的转换方式。而不是像其他的运算符那样子的方式，将"),a("code",[t._v("对象转换为数字")]),t._v("。"),a("br"),t._v(" "),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("!=")]),t._v(" 这三个运算符，会对转换目标对象（包含了日期对象）进行对象到原始值的转换。对于非日期的对象来说，对象到原始值的转换基本是"),a("code",[t._v("对象到数字")]),t._v("的转换，首先调用"),a("code",[t._v("valueOf()")]),t._v("，再调用"),a("code",[t._v("toString()")]),t._v("；日期对象则使用"),a("code",[t._v("对象到字符串")]),t._v("的转换模式。这里所说的两种转换和上述 "),a("strong",[t._v("2")]),t._v(" 中的转换模式有点不同，这里通过"),a("code",[t._v("valueOf()")]),t._v("和"),a("code",[t._v("toString()")]),t._v("返回的原始值将被直接使用，而不会被强制转换成数字或字符串。"),a("br"),t._v(" "),a("code",[t._v("关系运算符")]),t._v("针对任何对象，都会首先调用"),a("code",[t._v("valueOf()")]),t._v("，然后再调用"),a("code",[t._v("toString()")]),t._v("，得到原始值，就不会再去执行"),a("code",[t._v("toString")]),t._v("，不管得到的原始值是否直接使用，他都不会进一步被转化为数字或字符串。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非日期类对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特殊")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("p",[t._v("其他运算符到特定类型的转换都很明确。"),a("br"),t._v("\n我们以"),a("code",[t._v("-")]),t._v("运算符为例，会将左右两边的操作数都转化为数字。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string': '+' 将日期转化为字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 日期对象使用对象转字符串的模式，先使用 toString() 的模式，转成了原始值，再 + 1，则变成了 'Sun Jan 30 2022 23:26:06 GMT+0800 (中国标准时间)1'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number': '-'使用对象转数字的模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象转数字，先执行 valueOf()，看是否返回原始值，如果不是，则在执行 toString()，(new Date()).valueOf => 1643556651527")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，分别是隐式的和显示的字符串转换")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true, '>' 将日期转换为数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now 会先去执行，valueOf()，然后再调用 toString()")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-10-1-函数作用域和声明提前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-1-函数作用域和声明提前"}},[t._v("#")]),t._v(" 3.10.1 函数作用域和声明提前")]),t._v(" "),a("p",[t._v("Javascript 中，存在函数作用域，变量在声明他们的函数体以及这个函数体嵌套的任意函数内部都是有定义的。"),a("br"),t._v("\n在函数体嵌套的函数中，如果声明了变量，那么这个变量的声明，会提前到函数体的最外层函数，但不会给其赋值，此时若是打印，则会获得"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_3-10-2-作为属性的变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-2-作为属性的变量"}},[t._v("#")]),t._v(" 3.10.2 作为属性的变量")]),t._v(" "),a("p",[t._v("在全局的环境下，有两种创建全局变量的形式，一个是通过 var 来声明，一个是直接不声明进行变量赋值。但这两者是有些区别的。通过 var 声明的变量，对于全局对象那个属性来讲，是不可配置的，无法通过 delete 来删除，而另外一种是可删除的。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" truevar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfakevar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fakevar2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" truevar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false;不可以删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" fakevar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true; 可以被删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" fakevar2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true; 可以被删除")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-10-3-作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-3-作用域链"}},[t._v("#")]),t._v(" 3.10.3 作用域链")]),t._v(" "),a("blockquote",[a("p",[t._v("Javascript 是机遇词法作用域的语言：通过阅读包含变量定义在内的数行源码就能知道变量的作用域。全局变量在程序中始终都是有定义的，局部变量在声明它的函数体内记忆其所嵌套的函数那始终是有定义的。")])]),t._v(" "),a("p",[t._v("每一段 Javascript 代码都有一个与之关联的作用域链（scope chain），包括全局代码和函数。"),a("br"),t._v("\n这个作用域链是一个对象列表或链表，这组对象定义了这段代码“作用域中”的变量。"),a("br"),t._v(" "),a("strong",[t._v("变量解析")]),t._v("：当 Javascript 需要查找变量 x 的值的时候，他会从链中的第一个对象开始找，如果第一个对象有一个名为 x 的属性，则会直接使用这个属性的值，如果没有，则会继续查找链上的下一个对象，以此类推，没有则接着往下一个对象找，如果作用域链上没有一个对象含有属性 x，则会抛出一个引用错误（ReferenceError）异常。"),a("br"),t._v(" "),a("strong",[t._v("作用域链的创建规则")]),t._v("：\n创建对象：")]),t._v(" "),a("ul",[a("li",[t._v("在 Javascript 的顶层代码中，不包含任何函数定义内的代码，作用域链是一个全局对象组成。")]),t._v(" "),a("li",[t._v("在不包含嵌套的函数体中，作用域链上有两个对象，第一个，是定义函数参数和局部变量的对象；第二个，是全局对象。")]),t._v(" "),a("li",[t._v("包含嵌套的函数体中，作用域上至少有三个对象，嵌套那函数的参数，局部变量；嵌套外层函数的参数，局部变量；全局对象。"),a("br"),t._v("\n以此类推。")])]),t._v(" "),a("p",[t._v("何时创建：\n"),a("em",[t._v("当定义一个函数的时候")]),t._v("，实际上是保存了一个作用域链。"),a("em",[t._v("当调用这个函数的时候")]),t._v("，他创建一个新的对象来存储他的局部变量，并将会这个对象添加至保存的那个作用域链上，同时创建一个更长的"),a("strong",[t._v("表示函数调用作用域的“链”")]),t._v("。"),a("br"),t._v("\n对于嵌套函数来讲，每次调用外部函数的时候，内部函数又会被重新定义一遍，因为在每次调用外部函数的时候，作用域链都是不同的。但是在内部函数定义的时候，代码是相同的，但是关联代码的作用域链是不相同的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);